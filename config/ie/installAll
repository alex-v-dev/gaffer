#!/usr/bin/env iePython2.7

import IEEnv
import sys
import subprocess

##########################################################################
# parse SConstruct file for the gaffer version
##########################################################################

## \todo: this is duplicated from ./options but can we centralize it instead?
def gafferVersionFromScons() :

	import re
	sconsFile = "SConstruct"
	versionVars = ["gafferMilestoneVersion", "gafferMajorVersion", "gafferMinorVersion", "gafferPatchVersion"]
	varsToFind = list(versionVars)

	varsFound = {}
	with open( sconsFile, "r" ) as f :
		for line in f :
			for varName in varsToFind :
				match = re.match( "^\s*%s\s*=\s*(?P<value>\d+).*$" % varName, line )
				if match :
					varsFound[varName] = match.groupdict()["value"]
					varsToFind.remove( varName )
					break
			if not varsToFind:
				break

	if varsToFind:
		raise Exception( "Could not find the gaffer version in the SConstruct file. Please review the parsing rules." )

	return ".".join( [varsFound[k] for k in versionVars] )


def gafferRegistryVersion( gafferVersion ) :

	# have to do local imports for some reason on the options file
	import distutils
	import IEEnv

	gafferCompatibilityVersion = ".".join( gafferVersion.split( "." )[:2] )
	looseGafferVersion = distutils.version.LooseVersion( gafferVersion )
	registryVersions = list( IEEnv.registry["apps"]["gaffer"].keys() )
	# only keep entries that have the expected elements
	registryVersions = [x for x in registryVersions if len( x.split( "." ) ) == 4]
	# only keep those that are of the same compatibility version
	registryVersions = [x for x in registryVersions if x.startswith( gafferCompatibilityVersion + "." )]
	# only keep those that are the same or older than the one we are installing
	registryVersions = [x for x in registryVersions if looseGafferVersion >= distutils.version.LooseVersion( x )]
	# sort the remaining entries by LooseVersion, and pick the first one
	registryVersions.sort( key=distutils.version.LooseVersion, reverse=True )

	if not registryVersions:
		raise Exception( "Could not find a matching registry entry for {}".format( gafferVersion ) )

	registryVersion = registryVersions[0]
	return registryVersion


gafferRegVersion = gafferRegistryVersion( gafferVersionFromScons() )
gafferReg = IEEnv.registry["apps"]["gaffer"][gafferRegVersion][IEEnv.platform()]
variantReg = gafferReg.get( "variants", {} )

##########################################################################
# Run a single build
##########################################################################

def build( extraArgs = [] ) :

	argsToValidate = [ "GAFFER_VERSION={}".format( gafferRegVersion ) ] + [ x for x in extraArgs if "_VERSION=" in x or x.startswith( "APP=" ) ]
	if not IEEnv.Registry.validateVariation( argsToValidate ) :
		print( "Skipped invalid variation combination: " + str(argsToValidate) + "\n" )
		return

	buildArgs = [ "scons" ]
	buildArgs.append( "install" if "RELEASE=1" in sys.argv[1:] else "build" )
	buildArgs.extend( extraArgs )
	buildArgs.extend( sys.argv[1:] )

	print( " ".join( buildArgs ) )
	if "DRYRUN=1" in sys.argv :
		return

	if subprocess.call( buildArgs ) != 0 :
		raise RuntimeError( "Error : " + " ".join( buildArgs ) )
	print( "Build succeeded: " + " ".join( buildArgs ) + "\n" )

##########################################################################
# Gather requirements
##########################################################################

platform = IEEnv.platform()
defaultCompilerVersion = IEEnv.registry["platformDefaults"][platform]["compilerVersion"]

cortexInfo = { x : IEEnv.registry["libraries"]["cortex"][x][platform] for x in IEEnv.activeVersions( IEEnv.registry["libraries"]["cortex"] ) }

# find all Arnold versions
arnoldVersions = IEEnv.activeVersions( IEEnv.registry["apps"]["arnold"] )

# fetch at least one active version of each renderer
dlVersion = ( IEEnv.activeVersions( IEEnv.registry["apps"]["3delight"] ) or [ "UNDEFINED" ] )[-1]

# find a specific appleseed version per compiler per cortex version
appleseedCompilerMap = { x : {} for x in IEEnv.activeVersions( IEEnv.registry["compilers"]["gcc"] ) }
for appleseedVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) :
	compilerVersion = IEEnv.registry["apps"]["appleseed"][appleseedVersion][platform]["compilerVersion"]
	for cortexCompatibilityVersion in cortexInfo.keys() :
		if IEEnv.Registry.validateVariation( [
			"COMPILER_VERSION={}".format( compilerVersion ),
			"CORTEX_VERSION={}".format( cortexCompatibilityVersion ),
			"APPLESEED_VERSION={}".format( appleseedVersion ),
		] ) :
			appleseedCompilerMap[compilerVersion][cortexCompatibilityVersion] = appleseedVersion

##########################################################################
# Loop over all builds
##########################################################################

if platform in ( "cent7.x86_64" ) :

	for cortexCompatibilityVersion, cortexReg in cortexInfo.items() :

		# standalone builds
		compilerVersion = cortexReg.get( "compilerVersion", defaultCompilerVersion )
		appleseedVersion = appleseedCompilerMap[compilerVersion].get( cortexCompatibilityVersion, "UNDEFINED" )
		baseArgs = [
			"COMPILER_VERSION={}".format( compilerVersion ),
			"CORTEX_VERSION={}".format( cortexCompatibilityVersion ),
			"APPLESEED_VERSION={}".format( appleseedVersion ),
			"DL_VERSION={}".format( dlVersion ),
		]
		for variant, variantInfo in variantReg.items() :
			for arnoldVersion in arnoldVersions :
				variantArgs = [ "GAFFER_BUILD_VARIANT={}".format( variant ) ] + [ "=".join( x ) for x in variantInfo.items() ]
				arnoldArgs = [ "ARNOLD_VERSION={}".format( arnoldVersion ) ]
				build( baseArgs + variantArgs + arnoldArgs )

		# app specific builds
		for app, minimumVersion in (
			( "maya", None ),
			( "houdini", "16.5.268" ),
			( "nuke", None )
		) :
			for appVersion in IEEnv.activeAppVersions( app, minimumVersion=minimumVersion ) :
				compilerVersion = IEEnv.registry["apps"][app][appVersion][platform]["compilerVersion"]
				appleseedVersion = appleseedCompilerMap[compilerVersion].get( cortexCompatibilityVersion, "UNDEFINED" )
				for arnoldVersion in arnoldVersions :
					build( [
						"APP={}".format( app ),
						"APP_VERSION={}".format( appVersion ),
						"CORTEX_VERSION={}".format( cortexCompatibilityVersion ),
						"APPLESEED_VERSION={}".format( appleseedVersion ),
						"ARNOLD_VERSION={}".format( arnoldVersion ),
						"DL_VERSION={}".format( dlVersion ),
					] )

else :

	raise RuntimeError( "Unknown platform" )
